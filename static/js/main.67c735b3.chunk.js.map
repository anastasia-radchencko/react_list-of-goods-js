{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","GoodsList","goods","map","good","GoodCard","SORT_FIELD_NAME","SORT_FIELD_LENGTH","App","useState","sortField","setSortField","reversed","setReversed","visibleGoods","preparedGoods","sort","goods1","goods2","localeCompare","length","reverse","getPreparedGoods","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"iOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChB,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,cAAC,EAAD,CAAqBA,KAAMA,GAAZA,SAKfC,EAAW,SAAC,GAAD,IAAGD,EAAH,EAAGA,KAAH,OACf,oBAAI,UAAQ,OAAZ,SAAoBA,KAKhBE,EAAkB,OAClBC,EAAoB,SA2BnB,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EA5BR,SAA0BZ,EAA1B,GAA2D,IAAxBQ,EAAuB,EAAvBA,UAAWE,EAAY,EAAZA,SACxCG,EAAa,YAAOb,GAqBxB,OAnBIQ,GACFK,EAAcC,MAAK,SAACC,EAAQC,GAC1B,OAAQR,GACN,KAAKJ,EACH,OAAOW,EAAOE,cAAcD,GAE9B,KAAKX,EACH,OAAOU,EAAOG,OAASF,EAAOE,OAEhC,QACE,OAAO,MAKXR,IACFG,EAAgBA,EAAcM,WAGzBN,EAMcO,CACnBtB,EAAiB,CAAEU,YAAWE,aAQhC,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWZ,IAAiBL,EACxB,iBACA,0BAEJmB,QAAS,kBAAMd,EAAaL,IAN9B,iCAWA,wBACEkB,KAAK,SACLD,UAAWZ,IAAiBJ,EACxB,oBACA,6BAEJkB,QAAS,kBAAMd,EAAaJ,IAN9B,4BAWA,wBACEiB,KAAK,SACLD,UAAWX,EACP,oBACA,6BAEJa,QAAS,kBAAMZ,GAAaD,IAN9B,sBAWEF,GAAaE,IACb,wBACEY,KAAK,SACLD,UAAWX,EACP,mBACA,4BAEJa,QAhDI,WACZd,EAAa,IACbE,GAAY,IAwCN,sBAaJ,cAAC,EAAD,CAAWX,MAAOY,QCtHxBY,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.67c735b3.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst GoodsList = ({ goods }) => (\n  <ul>\n    {goods.map(good => (\n      <GoodCard key={good} good={good} />\n    ))}\n  </ul>\n);\n\nconst GoodCard = ({ good }) => (\n  <li data-cy=\"Good\">{good}</li>\n);\n\n//\n\nconst SORT_FIELD_NAME = 'name';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, { sortField, reversed }) {\n  let preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((goods1, goods2) => {\n      switch (sortField) {\n        case SORT_FIELD_NAME:\n          return goods1.localeCompare(goods2);\n\n        case SORT_FIELD_LENGTH:\n          return goods1.length - goods2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reversed) {\n    preparedGoods = preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reversed, setReversed] = useState(false);\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer, { sortField, reversed },\n  );\n\n  const reset = () => {\n    setSortField('');\n    setReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={setSortField === SORT_FIELD_NAME\n            ? 'button is-info'\n            : 'button is-info is-light'\n          }\n          onClick={() => setSortField(SORT_FIELD_NAME)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={setSortField === SORT_FIELD_LENGTH\n            ? 'button is-success'\n            : 'button is-success is-light'\n          }\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={reversed\n            ? 'button is-warning'\n            : 'button is-warning is-light'\n          }\n          onClick={() => setReversed(!reversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reversed) && (\n          <button\n            type=\"button\"\n            className={reversed\n              ? 'button is-danger'\n              : 'button is-danger is-light'\n            }\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodsList goods={visibleGoods} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}